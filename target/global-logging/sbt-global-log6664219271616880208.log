[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_261)
[debug] Load.defaultLoad until apply took 1025.5574ms
[debug]           Load.loadUnit: plugins took 152.3573ms
[debug]           Load.loadUnit: defsScala took 0.3791ms
[debug] [Loading] Scanning directory C:\MY_PROJECT\test_avelchuk_a\project
[debug]             Load.loadUnit: mkEval took 13.2362ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\MY_PROJECT\test_avelchuk_a\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.1924 ms
[info] loading settings for project test_avelchuk_a-build from plugins.sbt ...
[debug]               Load.resolveProject(test_avelchuk_a-build) took 70.0288ms
[debug]             Load.loadTransitive: finalizeProject(Project(id test_avelchuk_a-build, base: C:\MY_PROJECT\test_avelchuk_a\project, plugins: List(<none>))) took 125.6386ms
[debug] [Loading] Done in C:\MY_PROJECT\test_avelchuk_a\project, returning: (test_avelchuk_a-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 555.4317ms
[debug]           Load.loadUnit: cleanEvalClasses took 24.2845ms
[debug]         Load.loadUnit(file:/C:/MY_PROJECT/test_avelchuk_a/project/, ...) took 739.7233ms
[debug]       Load.apply: load took 939.7825ms
[debug]       Load.apply: resolveProjects took 10.9007ms
[debug]       Load.apply: finalTransforms took 108.35ms
[debug]       Load.apply: config.delegates took 24.2628ms
[debug]       Load.apply: Def.make(settings)... took 733.7376ms
[debug]       Load.apply: structureIndex took 164.7348ms
[debug]       Load.apply: mkStreams took 2.1786ms
[info] loading project definition from C:\MY_PROJECT\test_avelchuk_a\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4548.8041ms
[debug]     Load.loadUnit: defsScala took 0.0049ms
[debug] [Loading] Scanning directory C:\MY_PROJECT\test_avelchuk_a
[debug]       Load.loadUnit: mkEval took 0.9955ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(play.sbt.PlayJava), Atom(play.ebean.sbt.PlayEbean), Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(play.sbt.Play),Set(Atom(play.sbt.routes.RoutesCompiler)))
[debug] Clause(Atom(play.sbt.Play),Set(Atom(com.typesafe.sbt.jse.SbtJsTask)))
[debug] Clause(Atom(play.sbt.Play),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaServerAppPackaging)))
[debug] Clause(Atom(play.sbt.Play),Set(Atom(play.twirl.sbt.SbtTwirl)))
[debug] Clause(Atom(play.sbt.PlayAkkaHttp2Support),Set(Atom(play.sbt.PlayAkkaHttpServer)))
[debug] Clause(Atom(play.sbt.PlayAkkaHttp2Support),Set(Atom(com.lightbend.sbt.javaagent.JavaAgent)))
[debug] Clause(Atom(play.sbt.PlayAkkaHttpServer),Set(Atom(play.sbt.PlayService)))
[debug] Clause(Atom(play.sbt.PlayFilters),Set(Atom(play.sbt.PlayWeb)))
[debug] Clause(Atom(play.sbt.PlayJava),Set(Atom(play.sbt.PlayWeb)))
[debug] Clause(Atom(play.sbt.PlayLayoutPlugin),Set(Atom(play.sbt.PlayWeb)))
[debug] Clause(Atom(play.sbt.PlayLogback),Set(Atom(play.sbt.PlayService)))
[debug] Clause(Atom(play.sbt.PlayMinimalJava),Set(Atom(play.sbt.PlayWeb)))
[debug] Clause(Atom(play.sbt.PlayNettyServer),Set(Atom(play.sbt.PlayService)))
[debug] Clause(Atom(play.sbt.PlayScala),Set(Atom(play.sbt.PlayWeb)))
[debug] Clause(Atom(play.sbt.PlayService),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaServerAppPackaging)))
[debug] Clause(Atom(play.sbt.PlayWeb),Set(Atom(play.sbt.routes.RoutesCompiler)))
[debug] Clause(Atom(play.sbt.PlayWeb),Set(Atom(com.typesafe.sbt.jse.SbtJsTask)))
[debug] Clause(Atom(play.sbt.PlayWeb),Set(Atom(play.sbt.PlayService)))
[debug] Clause(Atom(play.sbt.PlayWeb),Set(Atom(play.twirl.sbt.SbtTwirl)))
[debug] Clause(Atom(play.sbt.routes.RoutesCompiler),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(play.sbt.test.MediatorWorkaroundPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(play.ebean.sbt.PlayEbean),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(play.twirl.sbt.SbtTwirl),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.SbtNativePackager),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.windows.WindowsPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.docker.DockerPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.debian.DebianPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.rpm.RpmPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaServerAppPackaging),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.jar.ClasspathJarPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.jar.LauncherJarPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.jlink.JlinkPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.scripts.AshScriptPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.scripts.AshScriptPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.scripts.BatStartScriptPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemVPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemdPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin),Set(Atom(com.typesafe.sbt.packager.debian.DebianPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin),Set(Atom(com.typesafe.sbt.packager.rpm.RpmPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.systemloader.UpstartPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.debian.DebianDeployPlugin),Set(Atom(com.typesafe.sbt.packager.debian.DebianPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.debian.DebianPlugin),Set(Atom(com.typesafe.sbt.packager.linux.LinuxPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.debian.JDebPackaging),Set(Atom(com.typesafe.sbt.packager.debian.DebianPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.docker.DockerPlugin),Set(Atom(com.typesafe.sbt.packager.universal.UniversalPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.docker.DockerSpotifyClientPlugin),Set(Atom(com.typesafe.sbt.packager.docker.DockerPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.graalvmnativeimage.GraalVMNativeImagePlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.packager.jdkpackager.JDKPackagerDeployPlugin),Set(Atom(com.typesafe.sbt.packager.jdkpackager.JDKPackagerPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.jdkpackager.JDKPackagerPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.packager.jdkpackager.JDKPackagerPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.jar.LauncherJarPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.linux.LinuxPlugin),Set(Atom(com.typesafe.sbt.packager.universal.UniversalPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.rpm.RpmDeployPlugin),Set(Atom(com.typesafe.sbt.packager.rpm.RpmPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.rpm.RpmPlugin),Set(Atom(com.typesafe.sbt.packager.linux.LinuxPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.universal.UniversalDeployPlugin),Set(Atom(com.typesafe.sbt.packager.universal.UniversalPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.universal.UniversalPlugin),Set(Atom(com.typesafe.sbt.SbtNativePackager)))
[debug] Clause(Atom(com.typesafe.sbt.packager.windows.WindowsDeployPlugin),Set(Atom(com.typesafe.sbt.packager.windows.WindowsPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.windows.WindowsPlugin),Set(Atom(com.typesafe.sbt.packager.universal.UniversalPlugin)))
[debug] Clause(Atom(com.lightbend.sbt.javaagent.JavaAgent),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(com.lightbend.sbt.javaagent.JavaAgentPackaging),Set(Atom(com.lightbend.sbt.javaagent.JavaAgent)))
[debug] Clause(Atom(com.lightbend.sbt.javaagent.JavaAgentPackaging),Set(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.web.SbtWeb),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.jse.SbtJsEngine),Set(Atom(com.typesafe.sbt.web.SbtWeb)))
[debug] Clause(Atom(com.typesafe.sbt.jse.SbtJsTask),Set(Atom(com.typesafe.sbt.jse.SbtJsEngine)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(play.sbt.PlayService),Set(Atom(play.sbt.PlayAkkaHttpServer)))
[debug] Clause(Atom(play.sbt.PlayWeb),Set(Atom(play.sbt.PlayFilters)))
[debug] Clause(Atom(play.sbt.PlayWeb),Set(Atom(play.sbt.PlayLayoutPlugin)))
[debug] Clause(Atom(play.sbt.PlayService),Set(Atom(play.sbt.PlayLogback)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin)))
[debug] Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.archetypes.scripts.BatStartScriptPlugin)))
[debug] Clause(And(Set(Atom(com.lightbend.sbt.javaagent.JavaAgent), Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging))),Set(Atom(com.lightbend.sbt.javaagent.JavaAgentPackaging)))
[debug] Clause(Atom(com.typesafe.sbt.web.SbtWeb),Set(Atom(com.typesafe.sbt.jse.SbtJsEngine)))
[debug] Clause(Atom(com.typesafe.sbt.jse.SbtJsEngine),Set(Atom(com.typesafe.sbt.jse.SbtJsTask))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,play.ebean.sbt.PlayEbean,play.sbt.PlayJava,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,play.sbt.PlayWeb,play.twirl.sbt.SbtTwirl,play.sbt.PlayService,sbt.plugins.SemanticdbPlugin,sbt.plugins.JUnitXmlReportPlugin,play.sbt.PlayFilters,play.sbt.PlayLayoutPlugin,play.sbt.routes.RoutesCompiler,com.typesafe.sbt.jse.SbtJsTask,sbt.plugins.MiniDependencyTreePlugin,play.sbt.PlayLogback,play.sbt.PlayAkkaHttpServer,com.typesafe.sbt.jse.SbtJsEngine,com.typesafe.sbt.packager.archetypes.JavaServerAppPackaging,com.typesafe.sbt.web.SbtWeb,com.typesafe.sbt.packager.archetypes.JavaAppPackaging,com.typesafe.sbt.packager.rpm.RpmPlugin,com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin,com.typesafe.sbt.packager.windows.WindowsPlugin,com.typesafe.sbt.packager.archetypes.scripts.BatStartScriptPlugin,com.typesafe.sbt.packager.docker.DockerPlugin,com.typesafe.sbt.packager.debian.DebianPlugin,com.typesafe.sbt.packager.universal.UniversalPlugin,com.typesafe.sbt.packager.linux.LinuxPlugin,com.typesafe.sbt.SbtNativePackager)
[debug] Plugins.deducer#function took 32.7194 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 163.5491ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\MY_PROJECT\test_avelchuk_a, plugins: List(play.sbt.PlayJava && play.ebean.sbt.PlayEbean))) took 203.303ms
[debug] [Loading] Done in C:\MY_PROJECT\test_avelchuk_a, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 543.2035ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.3136ms
[debug]   Load.loadUnit(file:/C:/MY_PROJECT/test_avelchuk_a/, ...) took 5100.9763ms
[debug] Load.apply: load took 5132.5842ms
[debug] Load.apply: resolveProjects took 0.2562ms
[debug] Load.apply: finalTransforms took 24.1686ms
[debug] Load.apply: config.delegates took 2.0343ms
[debug] Load.apply: Def.make(settings)... took 212.4664ms
[debug] Load.apply: structureIndex took 79.7314ms
[debug] Load.apply: mkStreams took 0.0058ms
[info]   __              __
[info]   \ \     ____   / /____ _ __  __
[info]    \ \   / __ \ / // __ `// / / /
[info]    / /  / /_/ // // /_/ // /_/ /
[info]   /_/  / .___//_/ \__,_/ \__, /
[info]       /_/               /____/
[info] 
[info] Version 2.8.16 running Java 1.8.0_261
[info] 
[info] Play is run entirely by the community. Please consider contributing and/or donating:
[info] https://www.playframework.com/sponsors
[info] 
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(project root, None, None)
[info]   __              __
[info]   \ \     ____   / /____ _ __  __
[info]    \ \   / __ \ / // __ `// / / /
[info]    / /  / /_/ // // /_/ // /_/ /
[info]   /_/  / .___//_/ \__,_/ \__, /
[info]       /_/               /____/
[info] 
[info] Version 2.8.16 running Java 1.8.0_261
[info] 
[info] Play is run entirely by the community. Please consider contributing and/or donating:
[info] https://www.playframework.com/sponsors
[info] 
[debug] > Exec(run, None, None)
[debug] Evaluating tasks: Compile / run
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[info] compiling 2 Java sources to C:\MY_PROJECT\test_avelchuk_a\target\scala-2.13\classes ...
[info] done compiling
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Exporting web-assets:test_avelchuk
[info] compiling 6 Scala sources and 11 Java sources to C:\MY_PROJECT\test_avelchuk_a\target\scala-2.13\classes ...
[info] Non-compiled module 'compiler-bridge_2.13' for Scala 2.13.8. Compiling...
[info]   Compilation completed in 14.473s.
[info] done compiling
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Exporting web-assets:test_avelchuk
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[info] compiling 1 Java source to C:\MY_PROJECT\test_avelchuk_a\target\scala-2.13\classes ...
[error] C:\MY_PROJECT\test_avelchuk_a\app\service\Mail.java:13:1: service.Mail is not abstract and does not override abstract method getCurrentIP() in service.IEmail
[error] public class Mail implements IEmail {
[error] 
[error] 
[error]     // ОТПРАВКА-отправить письмо на почту пользователя с обратной ссылкой содержащей email и token(возможно password)
[error] 
[error]     // АВТОРИЗАЦИЯ-
[error]     // необходимо получить внешний адрес машины
[error]     // отправить с почты сообщение с email и password(возможно еще токен) на ip адрес компьютера с портом 9000/autorisation
[error]     // Расшифровать сообщение и авторизировать пользователя с такими данными
[error] 
[error] 
[error]     @Override
[error]     public void getCurrentIP() { // получение IP компьютера
[error] 
[error] //        InetAddress iAddress = null;  // localhost -ok
[error] //        try {
[error] //            iAddress = InetAddress.getLocalHost();
[error] //        } catch (UnknownHostException e) {
[error] //            e.printStackTrace();
[error] //        }
[error] //        String currentIp = iAddress.getHostAddress();
[error] //        System.out.println("Current IP address : " + currentIp); //gives only host address
[error] //        return currentIp;
[error]         
[error]         Enumeration e = null;
[error]         try {
[error]             e = NetworkInterface.getNetworkInterfaces();
[error]         } catch (SocketException ex) {
[error]             ex.printStackTrace();
[error]         }
[error]         int ctr = 0;
[error]         while (e.hasMoreElements()) {
[error]             NetworkInterface n = (NetworkInterface) e.nextElement();
[error]             Enumeration ee = n.getInetAddresses();
[error]             while (ee.hasMoreElements() && ctr < 3) {
[error]                 ctr++;
[error]                 if (ctr == 3)
[error]                     break;
[error]                 InetAddress i = (InetAddress) ee.nextElement();
[error]                 if (ctr == 2)
[error]                     System.out.println(i.getHostAddress());
[error] 
[error]             }
[error]         }
[error]     }
[error] 
[error] 
[error] 
[error] 
[error] 
[error] 
[error] 
[error] 
[error]     @Override
[error]     public void sendMessageEmailRegistration(String email) {
[error] 
[error]         final String from = "aals@ya.ru";
[error]         final String pass = "21Alex7";
[error]         final String host = "smtp.yandex.ru";
[error] 
[error]         Properties props = new Properties();
[error]         props.put("mail.smtp.host", host);
[error]         props.put("mail.smtp.user", from);
[error]         props.put("mail.smtp.password", pass);
[error]         props.put("mail.smtp.port", "465");
[error]         props.put("mail.smtp.auth", "true");
[error]         props.put("mail.smtp.starttls.enable", "true");
[error]         props.put("mail.smtp.ssl.enable", "true");
[error]         props.put("mail.smtp.quitwait", "false");
[error]         props.put("mail.debug", "true");
[error] 
[error]         Session session = Session.getInstance(props,
[error]                 new javax.mail.Authenticator() {
[error]                     protected PasswordAuthentication getPasswordAuthentication() {
[error]                         return new PasswordAuthentication(from, pass);
[error]                     }
[error]                 });
[error]         try {
[error]             Message message = new MimeMessage(session);
[error]             message.setFrom(new InternetAddress("aals@ya.ru"));
[error]             message.setRecipients(Message.RecipientType.TO,
[error]                     InternetAddress.parse("oas0204@yandex.ru")); // Адрес получателя
[error]             message.setSubject("Письмо авторизации");
[error]             message.setContent("<h1>Hello</h1><a href=http://site.name.com/email_confirm?token="+email, "text/html; charset=utf-8");
[error]             Transport.send(message);
[error]             System.out.println("Done");
[error]             System.out.println(getCurrentIP());
[error]         } catch (MessagingException e) {
[error]             throw new RuntimeException(e);
[error]         }
[error]     }
[error] }
[error] C:\MY_PROJECT\test_avelchuk_a\app\service\Mail.java:25:1: getCurrentIP() in service.Mail cannot implement getCurrentIP() in service.IEmail
[error]   return type void is not compatible with java.lang.String
[error] @Override
[error]     public void getCurrentIP() { // получение IP компьютера
[error] 
[error] //        InetAddress iAddress = null;  // localhost -ok
[error] //        try {
[error] //            iAddress = InetAddress.getLocalHost();
[error] //        } catch (UnknownHostException e) {
[error] //            e.printStackTrace();
[error] //        }
[error] //        String currentIp = iAddress.getHostAddress();
[error] //        System.out.println("Current IP address : " + currentIp); //gives only host address
[error] //        return currentIp;
[error]         
[error]         Enumeration e = null;
[error]         try {
[error]             e = NetworkInterface.getNetworkInterfaces();
[error]         } catch (SocketException ex) {
[error]             ex.printStackTrace();
[error]         }
[error]         int ctr = 0;
[error]         while (e.hasMoreElements()) {
[error]             NetworkInterface n = (NetworkInterface) e.nextElement();
[error]             Enumeration ee = n.getInetAddresses();
[error]             while (ee.hasMoreElements() && ctr < 3) {
[error]                 ctr++;
[error]                 if (ctr == 3)
[error]                     break;
[error]                 InetAddress i = (InetAddress) ee.nextElement();
[error]                 if (ctr == 2)
[error]                     System.out.println(i.getHostAddress());
[error] 
[error]             }
[error]         }
[error]     }
[error] C:\MY_PROJECT\test_avelchuk_a\app\service\Mail.java:24:1: method does not override or implement a method from a supertype
[error] @Override
[error] C:\MY_PROJECT\test_avelchuk_a\app\service\Mail.java:99:1: 'void' type not allowed here
[error] getCurrentIP()
[debug] Forcing garbage collection...
[error] (Compile / compileIncremental) javac returned non-zero exit code
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[info] compiling 1 Java source to C:\MY_PROJECT\test_avelchuk_a\target\scala-2.13\classes ...
[info] done compiling
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Exporting web-assets:test_avelchuk
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[info] compiling 1 Java source to C:\MY_PROJECT\test_avelchuk_a\target\scala-2.13\classes ...
[info] done compiling
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Exporting web-assets:test_avelchuk
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[info] compiling 1 Java source to C:\MY_PROJECT\test_avelchuk_a\target\scala-2.13\classes ...
[info] done compiling
[debug] Forcing garbage collection...
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Exporting web-assets:test_avelchuk
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[info] compiling 1 Java source to C:\MY_PROJECT\test_avelchuk_a\target\scala-2.13\classes ...
[info] done compiling
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Exporting web-assets:test_avelchuk
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
